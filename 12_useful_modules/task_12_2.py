# -*- coding: utf-8 -*-
"""
Задание 12.2


Функция ping_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона,
например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список,
где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список, в котором содержатся IP-адреса
и/или диапазоны IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные
адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только
последний октет адреса.

Функция возвращает список IP-адресов.

Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

"""
import ipaddress

def convert_ranges_to_ip_list(ip_ranges):
    ip_list = []
    
    for ip_range in ip_ranges:
        # Проверяем, является ли диапазон в виде "X.X.X.X-N"
        if '-' in ip_range:
            start_ip, end_ip = ip_range.split('-')
            
            # Если end_ip — это число, заменяем его на правильный формат адреса
            if end_ip.isdigit():
                # Получаем последний октет из start_ip
                start_ip_obj = ipaddress.IPv4Address(start_ip)
                start_octets = str(start_ip_obj).split('.')
                start_octets[3] = end_ip  # Заменяем последний октет на число в end_ip
                end_ip = '.'.join(start_octets)
            
            # Конвертируем оба адреса в объекты IPv4Address
            start_ip_obj = ipaddress.IPv4Address(start_ip)
            end_ip_obj = ipaddress.IPv4Address(end_ip)
            
            # Генерируем все IP-адреса в диапазоне
            for ip in range(int(start_ip_obj), int(end_ip_obj) + 1):
                ip_list.append(str(ipaddress.IPv4Address(ip)))
        else:
            ip_list.append(ip_range)
    
    return ip_list
