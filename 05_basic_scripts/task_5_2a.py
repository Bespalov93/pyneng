# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

# Запрашиваем у пользователя ввод
network = input("Введите IP-сеть в формате 10.1.1.0/24 или 10.1.1.1/24: ")

# Разделяем на IP и маску
ip, mask_length = network.split('/')
mask_length = int(mask_length)

# Преобразуем IP в десятичный формат
ip_decimal = ip.split('.')

# Преобразуем IP в двоичный формат
ip_binary = ''.join(format(int(octet), '08b') for octet in ip_decimal)

# Если введен адрес хоста, преобразуем его в сетевой
# Для этого обнуляем хостовую часть
network_binary = ip_binary[:mask_length] + '0' * (32 - mask_length)

# Получаем маску в двоичном и десятичном формате
mask_binary = "1" * mask_length + "0" * (32 - mask_length)
mask_decimal = [str(int(mask_binary[i:i+8], 2)) for i in range(0, 32, 8)]

# Преобразуем сетевой адрес в десятичный формат
network_decimal = [str(int(network_binary[i:i+8], 2)) for i in range(0, 32, 8)]

# Формируем вывод для сети
print("Network:")
print(f"{network_decimal[0]:<10}{network_decimal[1]:<10}{network_decimal[2]:<10}{network_decimal[3]:<10}")
print(f"{network_binary[0:8]}  {network_binary[8:16]}  {network_binary[16:24]}  {network_binary[24:32]}")

# Формируем вывод для маски
print("\nMask:")
print(f"/{mask_length}")
print(f"{mask_decimal[0]:<10}{mask_decimal[1]:<10}{mask_decimal[2]:<10}{mask_decimal[3]:<10}")
print(f"{mask_binary[0:8]}  {mask_binary[8:16]}  {mask_binary[16:24]}  {mask_binary[24:32]}")
